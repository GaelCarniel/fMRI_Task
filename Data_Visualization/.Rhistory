dim = c(100,100,100)
brain = array(0,dim)
rnorm(prod(dim))
# Define the range for each dimension
range <- 1:10
# Generate all coordinates in the cube
coordinates <- expand.grid(x = range, y = range, z = range)
# View the result
print(coordinates)
reward_index =expand.grid(x = 1:10, y = 1:10, z = 1:10)
hist(rnorm(prod(dim)))
Betas = array(NA,c(8,dim))
b=1
Betas[b,,,] = brain
reward = c(1,1,0,0,0,1,1,0)
context = c(rep(1,4),rep(0,4))
image = c(rep(1:4,2))
letter = c(1,0,1,0,0,1,0,1)
Betas = array(NA,c(8,dim))
for (b in 1:8){
Betas[b,,,] = brain
if (reward == 1){
x = reward_index[,1]
y = reward_index[,2]
z = reward_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 8
}else {
x = reward_index_n[,1]
y = reward_index_n[,2]
z = reward_index_n[,3]
Betas[b,,,] = Betas[b,x,y,z] - 8
}
if (condition ==1){
x = condition_index[,1]
y = condition_index[,2]
z = condition_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 15
}
if (letter==1){
x = letter_index[,1]
y = letter_index[,2]
z = letter_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 6
}
}
Betas = array(NA,c(8,dim))
for (b in 1:8){
Betas[b,,,] = brain
if (reward[b] == 1){
x = reward_index[,1]
y = reward_index[,2]
z = reward_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 8
}else {
x = reward_index_n[,1]
y = reward_index_n[,2]
z = reward_index_n[,3]
Betas[b,,,] = Betas[b,x,y,z] - 8
}
if (condition[b] ==1){
x = condition_index[,1]
y = condition_index[,2]
z = condition_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 15
}
if (letter[b]==1){
x = letter_index[,1]
y = letter_index[,2]
z = letter_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 6
}
}
b
x
Betas[b,x,y,z]
a  =Betas[b,x,y,z]
b
Betas = array(NA,c(8,dim))
b
if (reward[b] == 1){
x = reward_index[,1]
y = reward_index[,2]
z = reward_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 8
}else {
x = reward_index_n[,1]
y = reward_index_n[,2]
z = reward_index_n[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] - 8
}
rm(list=ls())
dim = c(100,100,100)
brain = array(0,dim)# 0 <- rnorm(prod(dim))
reward_index = expand.grid(x = 1:10, y = 1:10, z = 1:10)
reward_index_n =  expand.grid(x = 95:100, y = 95:100, z = 1:10)
#image_index =  expand.grid(x = 1:10, y = 90:100, z = 20:30) #Il me faudrait pls subset on verra  plus tard
condition_index = expand.grid(x = 90:100, y = 30:40, z = 20:40)
letter_index = expand.grid(x = 1:100, y = 98:100, z = 96:100)
reward = c(1,1,0,0,0,1,1,0)
condition = c(rep(1,4),rep(0,4))
image = c(rep(0:3,2))
letter = c(1,0,1,0,0,1,0,1)
Betas = array(NA,c(8,dim))
for (b in 1:8){
Betas[b,,,] = brain
if (reward[b] == 1){
x = reward_index[,1]
y = reward_index[,2]
z = reward_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 8
}else {
x = reward_index_n[,1]
y = reward_index_n[,2]
z = reward_index_n[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] - 8
}
if (condition[b] ==1){
x = condition_index[,1]
y = condition_index[,2]
z = condition_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 15
}
if (letter[b]==1){
x = letter_index[,1]
y = letter_index[,2]
z = letter_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 6
}
}
b
Betas[1,,1]
Betas[1,,,1]
Betas = array(NA,c(1,dim))
Betas[,,,] = brain
if (reward[b] == 1){
x = reward_index[,1]
y = reward_index[,2]
z = reward_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 8
}else {
x = reward_index_n[,1]
y = reward_index_n[,2]
z = reward_index_n[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] - 8
}
if (condition[b] ==1){
x = condition_index[,1]
y = condition_index[,2]
z = condition_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 15
}
if (letter[b]==1){
x = letter_index[,1]
y = letter_index[,2]
z = letter_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 6
}
rm(list=ls())
library(reticulate)
tb = read.csv("donnees_example.csv",header =T)
sliding_testing_corrected <- function(x,y,win=30,range=NULL){
if (is.null(range)){
range = c(1,length(x))
}
start = range[1]
stop = range[2]
offset= round(win/2)
bool = rep(NA,length(x))
p.value = rep(NA,length(x))
for (i in (start+offset):(stop-offset)){
indexes = (i-offset):(i+offset)
xx = x[indexes]
yy = y[indexes]
test = t.test(xx,yy,paired=T)
bool[i] = ifelse(test$p.value<0.05,1,0)
p.value[i] = test$p.value
}
return (list(bool,p.value))
}
segmentsofones <- function(v,value = 1, consecutive = 30){
#Making sure NAs are deleted and not taken for positive
v = ifelse(is.na(v),value-1,v)
start_positions=NULL;stop_positions=NULL
temp=NULL
for (i in 1:length(v)){
if (v[i]==value){
temp = c(temp,i)
}else {
if (length(temp)>consecutive){
start_positions=c(start_positions,temp[1])
stop_positions=c(stop_positions,temp[length(temp)])
}
temp=NULL
}
}
return(cbind(start_positions,stop_positions))
}
#segmentsofones(sliding_testing_corrected(tb$y1,tb$y2,range=c(15,1975))[[1]])
coord = segmentsofones(sliding_testing_corrected(tb$y1,tb$y2,range=c(15,1985))[[1]])
height = 8
col1 = rgb(0,113,188,150,maxColorValue = 255)
col2 = rgb(247,147,30,170,maxColorValue = 255)
plot(tb[15:(dim(tb)[1]-15),1],tb[15:(dim(tb)[1]-15),3],type="l",lwd=3,col=col2,main="R version",ylab="Mean Frequency",xlab="Time")
lines(tb[15:(dim(tb)[1]-15),1],tb[15:(dim(tb)[1]-15),2],col=col1,lwd=3)
segments(x0 = coord[,1],x1 = coord[,2],y0 = rep(height,dim(coord)[1]),y1 = rep(height,dim(coord)[1]),col="black",lwd = 2)
library(R.matlab)
limit = 20 #Do not touch
#Get the matlab outpufile
#output = readMat(paste0("../../../Matlab/CutData/cutteddata_cut",limit,".mat"))
output = readMat("Matlab_Files/cutteddata_cut20.mat")
data = output$output[,,1] #Probl√®me de structure Matlab / R
names = names(data)
print(names)
setwd("~/Psycopy/fMRITask1/Data_Visualization")
# Function to display files and allow user selection
select_file <- function(directory='../Output',display=T,return_data=T) {
# Get the list of files in the specified directory
files <- list.files(directory,pattern = "_")#To ensure it's one of my saves
# Check if there are any files
if (length(files) == 0) {
cat("No files found in the directory.\n")
return(NULL)
}
# Display the list of files
cat("Files available in the directory:\n")
for (i in seq_along(files)) {
cat(i, ": ", files[i], "\n", sep = "")
}
# Prompt user for selection
repeat {
cat("Please enter the number of the file you want to display (1-", length(files), "): ", sep = "")
selection <- as.integer(readline())
# Check if the selection is valid
if (!is.na(selection) && selection >= 1 && selection <= length(files)) {
selected_file <- files[selection]
cat("You selected: ", selected_file, "\n", sep = "")
break
} else {
cat("Invalid selection. Please try again.\n")
}
}
tab = read.csv(paste0(directory,'\\',selected_file), header=TRUE)
if (display){
View(tab)
}
if (return_data){
return(tab)
}
}
select_log <- function(directory='../Output/Logs',display=T,return_data=T) {
# Get the list of files in the specified directory
files <- list.files(directory,pattern = "_")#To ensure it's one of my saves
# Check if there are any files
if (length(files) == 0) {
cat("No files found in the directory.\n")
return(NULL)
}
# Display the list of files
cat("Files available in the directory:\n")
for (i in seq_along(files)) {
cat(i, ": ", files[i], "\n", sep = "")
}
# Prompt user for selection
repeat {
cat("Please enter the number of the file you want to display (1-", length(files), "): ", sep = "")
selection <- as.integer(readline())
# Check if the selection is valid
if (!is.na(selection) && selection >= 1 && selection <= length(files)) {
selected_file <- files[selection]
cat("You selected: ", selected_file, "\n", sep = "")
break
} else {
cat("Invalid selection. Please try again.\n")
}
}
tab = read.csv(paste0(directory,'\\',selected_file), header=F, sep='\t')
if (display){
View(tab)
}
if (return_data){
return(tab)
}
}
select_file(return_data=F)
# Accuracy
tab = select_file(display=F)
tab$Gabor_Acc
tab$Updated_belief
tab$Belief_alone
tab$Sampled
View(tab)
mean(tab$Gabor_Acc)
