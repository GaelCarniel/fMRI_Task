dim = c(100,100,100)
brain = array(0,dim)
rnorm(prod(dim))
# Define the range for each dimension
range <- 1:10
# Generate all coordinates in the cube
coordinates <- expand.grid(x = range, y = range, z = range)
# View the result
print(coordinates)
reward_index =expand.grid(x = 1:10, y = 1:10, z = 1:10)
hist(rnorm(prod(dim)))
Betas = array(NA,c(8,dim))
b=1
Betas[b,,,] = brain
reward = c(1,1,0,0,0,1,1,0)
context = c(rep(1,4),rep(0,4))
image = c(rep(1:4,2))
letter = c(1,0,1,0,0,1,0,1)
Betas = array(NA,c(8,dim))
for (b in 1:8){
Betas[b,,,] = brain
if (reward == 1){
x = reward_index[,1]
y = reward_index[,2]
z = reward_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 8
}else {
x = reward_index_n[,1]
y = reward_index_n[,2]
z = reward_index_n[,3]
Betas[b,,,] = Betas[b,x,y,z] - 8
}
if (condition ==1){
x = condition_index[,1]
y = condition_index[,2]
z = condition_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 15
}
if (letter==1){
x = letter_index[,1]
y = letter_index[,2]
z = letter_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 6
}
}
Betas = array(NA,c(8,dim))
for (b in 1:8){
Betas[b,,,] = brain
if (reward[b] == 1){
x = reward_index[,1]
y = reward_index[,2]
z = reward_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 8
}else {
x = reward_index_n[,1]
y = reward_index_n[,2]
z = reward_index_n[,3]
Betas[b,,,] = Betas[b,x,y,z] - 8
}
if (condition[b] ==1){
x = condition_index[,1]
y = condition_index[,2]
z = condition_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 15
}
if (letter[b]==1){
x = letter_index[,1]
y = letter_index[,2]
z = letter_index[,3]
Betas[b,,,] = Betas[b,x,y,z] + 6
}
}
b
x
Betas[b,x,y,z]
a  =Betas[b,x,y,z]
b
Betas = array(NA,c(8,dim))
b
if (reward[b] == 1){
x = reward_index[,1]
y = reward_index[,2]
z = reward_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 8
}else {
x = reward_index_n[,1]
y = reward_index_n[,2]
z = reward_index_n[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] - 8
}
rm(list=ls())
dim = c(100,100,100)
brain = array(0,dim)# 0 <- rnorm(prod(dim))
reward_index = expand.grid(x = 1:10, y = 1:10, z = 1:10)
reward_index_n =  expand.grid(x = 95:100, y = 95:100, z = 1:10)
#image_index =  expand.grid(x = 1:10, y = 90:100, z = 20:30) #Il me faudrait pls subset on verra  plus tard
condition_index = expand.grid(x = 90:100, y = 30:40, z = 20:40)
letter_index = expand.grid(x = 1:100, y = 98:100, z = 96:100)
reward = c(1,1,0,0,0,1,1,0)
condition = c(rep(1,4),rep(0,4))
image = c(rep(0:3,2))
letter = c(1,0,1,0,0,1,0,1)
Betas = array(NA,c(8,dim))
for (b in 1:8){
Betas[b,,,] = brain
if (reward[b] == 1){
x = reward_index[,1]
y = reward_index[,2]
z = reward_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 8
}else {
x = reward_index_n[,1]
y = reward_index_n[,2]
z = reward_index_n[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] - 8
}
if (condition[b] ==1){
x = condition_index[,1]
y = condition_index[,2]
z = condition_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 15
}
if (letter[b]==1){
x = letter_index[,1]
y = letter_index[,2]
z = letter_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 6
}
}
b
Betas[1,,1]
Betas[1,,,1]
Betas = array(NA,c(1,dim))
Betas[,,,] = brain
if (reward[b] == 1){
x = reward_index[,1]
y = reward_index[,2]
z = reward_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 8
}else {
x = reward_index_n[,1]
y = reward_index_n[,2]
z = reward_index_n[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] - 8
}
if (condition[b] ==1){
x = condition_index[,1]
y = condition_index[,2]
z = condition_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 15
}
if (letter[b]==1){
x = letter_index[,1]
y = letter_index[,2]
z = letter_index[,3]
Betas[b,x,y,z] = Betas[b,x,y,z] + 6
}
rm(list=ls())
library(reticulate)
tb = read.csv("donnees_example.csv",header =T)
sliding_testing_corrected <- function(x,y,win=30,range=NULL){
if (is.null(range)){
range = c(1,length(x))
}
start = range[1]
stop = range[2]
offset= round(win/2)
bool = rep(NA,length(x))
p.value = rep(NA,length(x))
for (i in (start+offset):(stop-offset)){
indexes = (i-offset):(i+offset)
xx = x[indexes]
yy = y[indexes]
test = t.test(xx,yy,paired=T)
bool[i] = ifelse(test$p.value<0.05,1,0)
p.value[i] = test$p.value
}
return (list(bool,p.value))
}
segmentsofones <- function(v,value = 1, consecutive = 30){
#Making sure NAs are deleted and not taken for positive
v = ifelse(is.na(v),value-1,v)
start_positions=NULL;stop_positions=NULL
temp=NULL
for (i in 1:length(v)){
if (v[i]==value){
temp = c(temp,i)
}else {
if (length(temp)>consecutive){
start_positions=c(start_positions,temp[1])
stop_positions=c(stop_positions,temp[length(temp)])
}
temp=NULL
}
}
return(cbind(start_positions,stop_positions))
}
#segmentsofones(sliding_testing_corrected(tb$y1,tb$y2,range=c(15,1975))[[1]])
coord = segmentsofones(sliding_testing_corrected(tb$y1,tb$y2,range=c(15,1985))[[1]])
height = 8
col1 = rgb(0,113,188,150,maxColorValue = 255)
col2 = rgb(247,147,30,170,maxColorValue = 255)
plot(tb[15:(dim(tb)[1]-15),1],tb[15:(dim(tb)[1]-15),3],type="l",lwd=3,col=col2,main="R version",ylab="Mean Frequency",xlab="Time")
lines(tb[15:(dim(tb)[1]-15),1],tb[15:(dim(tb)[1]-15),2],col=col1,lwd=3)
segments(x0 = coord[,1],x1 = coord[,2],y0 = rep(height,dim(coord)[1]),y1 = rep(height,dim(coord)[1]),col="black",lwd = 2)
library(R.matlab)
limit = 20 #Do not touch
#Get the matlab outpufile
#output = readMat(paste0("../../../Matlab/CutData/cutteddata_cut",limit,".mat"))
output = readMat("Matlab_Files/cutteddata_cut20.mat")
data = output$output[,,1] #ProblÃ¨me de structure Matlab / R
names = names(data)
print(names)
setwd("~/Psycopy/fMRITask1/Input")
#Training set
tab = gen_gamestate(time,seed = 98721)
rm(list=ls())
time = 100 #Has to be even
halton_sequence_gen = function(i,b){#Non random
#Generate Halton sequence of base b
r=0;f=1
while (i>0){
f = f/b
r = r +f*(i%%b)
i = i%/%b
}
return(r)
}
halton_ngen = function(ngen,b,width=1,height=1){
a=numeric(ngen)
for (i in 1:ngen){
a[i]=halton_sequence_gen(i,b)
}
return(cbind(a*width,((1:ngen)/ngen)*height))
}
gen_gamestate <- function(time,seed=12345,display_profiles=T){
set.seed(seed)
true_state = sample(rep(0:1,time/2),time) #Shuffling without replacing so half/half
slider_ticks = 0:3 #Be careful if you change this you have to change a lot of things this is not modulable
#Generating profiles
coord = halton_ngen(6,3,0.7,1)
coord[,1] = coord[,1]+0.25
if (display_profiles){
plot(coord,xlim=c(0,1),ylim=c(0,1),ylab="Trustfullness",xlab="Competence",main="Bots' Profile")
# abline(h=c(0.2,0.8),col='grey')
# abline(v=c(0.25,0.95),col='grey')
abline(v =c(min(coord[,1]),max(coord[,1])),lty=3,col='grey')
abline(h =c(min(coord[,2]),max(coord[,2])),lty=3,col='grey')
}
# Old
# competence = seq(1/6,1,1/6) #Competence of the six players
# trustfullness = sample(competence)
competence = coord[,1]
trustfullness = coord[,2]
mat = matrix(NA,time,6)
mat_simple = matrix(NA,time,6)
for (i in 1:time){
for (p in 1:6){
rn = runif(1);rn2 = runif(1)
if(rn<competence[p]){
mat_simple[i,p]=true_state[i]
if(rn2<trustfullness[p]){
mat[i,p] = ifelse(true_state[i],3,0) #Here I am true and reliable so very confident 0 or 3 depending on the true state
} else{
mat[i,p] = ifelse(true_state[i],sample(2:3,1),sample(1:0,1))  #Here I am right but unreliable so random confidence right answer
}
}else{
#THIS VERSION IF YOU FAIL COMPETENCE YOU ARE WRONG
#mat_simple[i,p]=(true_state[i]+1)%%2 #oposite of true_state
#THIS VERSION IF YOU FAIL COMPETENCE YOU ARE RANDOM
#Proba to be really wrong when wrong 2/3
#THIS VERSION IF YOU FAIL COMPETENCE YOU ARE CLOSE TO RANDOM
p_list = list(c(2/3,1/3),c(1/3,2/3)) #True 2/3 to say no | False 2/3 to say Yes It could be .5 for pure randomness
proba = p_list[[ifelse(true_state[i],1,2)]]
mat_simple[i,p]=sample(0:1,1,prob = proba) #random
if(rn2<trustfullness[p]){
mat[i,p] = ifelse(mat_simple[i,p],1,2) #Here I am wrong and reliable so not very confident 1 or 2 depending on the true state
} else{
mat[i,p] = ifelse(mat_simple[i,p],sample(1:0,1),sample(2:3,1)) #Here I am wrong and unreliable so random confidence
}
}
}
}
tab = cbind(mat,true_state)
tab = as.data.frame(tab)
names(tab) = c(paste0("P",1:6),"Stim")
return(tab)
}
#Training set
tab = gen_gamestate(time,seed = 98721)
View(tab)
tab = gen_gamestate(time)
View(tab)
#Training set
tab = gen_gamestate(time,seed = 9872)
View(tab)
View(tab)
#Experiment set
tab = gen_gamestate(time)
write.csv(tab,"Game_Schedule.csv",row.names = F)
#Training set
tab = gen_gamestate(time,seed = 9872)
write.csv(tab,"Game_Schedule_Training.csv",row.names = F)
