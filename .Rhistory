R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],0.2)
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(rep(V_init,dim(pat)[1]/45),V)
alphas[i] = result$par
rating_sub = subset(ratings,ratings$ID==pat_name)
V_init = (rating_sub$Rating[rating_sub$Index==1]+220)/440 #Normalised
compute_error <- function(alpha, R, V_init, rating_ssub){
V = numeric(45)
V[1] = V_init
for(t in 1:45){
v = RL(v,R[t],alpha)
V[t] = v
}
#Computing the error
SE = sum(((rating_ssub$Rating+220)/440-(1-V[c(1,5,20,45)]))^2)
return(SE)
}
alphas = numeric(6)
for (i in 1:6){
#RL
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
# Optimization process
result <- optim(par = 0.2,  # alpha
fn = compute_error,
R = R,  # Additional parameters
V_init = v,
rating_ssub = rating_ssub,
method = "L-BFGS-B",
lower = 0,
upper = 1)
print(i)
print(result$par)
alphas[i] = result$par
}
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
V_init = V_init[i]
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(rep(V_init,dim(pat)[1]/45),V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
lines(0:45, V[, i],col = colours[cond[i]],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
ncol(V)
View(V)
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
V_init = V_init[i]
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
lines(0:45, V[,i],col = colours[cond[i]],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
View(V)
rating_sub = subset(ratings,ratings$ID==pat_name)
V_init = (rating_sub$Rating[rating_sub$Index==1]+220)/440 #Normalised
compute_error <- function(alpha, R, V_init, rating_ssub){
V = numeric(45)
V[1] = V_init
for(t in 1:45){
v = RL(v,R[t],alpha)
V[t] = v
}
#Computing the error
SE = sum(((rating_ssub$Rating+220)/440-(1-V[c(1,5,20,45)]))^2)
return(SE)
}
alphas = numeric(6)
for (i in 1:6){
#RL
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
# Optimization process
result <- optim(par = 0.2,  # alpha
fn = compute_error,
R = R,  # Additional parameters
V_init = v,
rating_ssub = rating_ssub,
method = "L-BFGS-B",
lower = 0,
upper = 1)
print(i)
print(result$par)
alphas[i] = result$par
}
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
V_init = V_init[i]
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
lines(0:45, V[,i],col = colours[cond[i]],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
V_init
rating_sub = subset(ratings,ratings$ID==pat_name)
V_init = (rating_sub$Rating[rating_sub$Index==1]+220)/440 #Normalised
compute_error <- function(alpha, R, V_init, rating_ssub){
V = numeric(45)
V[1] = V_init
for(t in 1:45){
v = RL(v,R[t],alpha)
V[t] = v
}
#Computing the error
SE = sum(((rating_ssub$Rating+220)/440-(1-V[c(1,5,20,45)]))^2)
return(SE)
}
alphas = numeric(6)
for (i in 1:6){
#RL
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
# Optimization process
result <- optim(par = 0.2,  # alpha
fn = compute_error,
R = R,  # Additional parameters
V_init = v,
rating_ssub = rating_ssub,
method = "L-BFGS-B",
lower = 0,
upper = 1)
print(i)
print(result$par)
alphas[i] = result$par
}
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
lines(0:45, V[,i],col = colours[cond[i]],lwd=3)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
conditions
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
lines(0:45, V[,i],col = colours[cond[i]],lwd=3)
points(c(1,5,20,45),rating_ssub,col=colours,pch=23)
}
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
lines(0:45, V[,i],col = colours[cond[i]],lwd=3)
points(c(1,5,20,45),rating_ssub$Rating,col=colours,pch=23)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
print(alphas)
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
lines(0:45, V[,i],col = colours[cond[i]],lwd=3)
points(c(1,5,20,45),(rating_ssub$Rating+220)/440,col=colours,pch=23)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
points(c(1,5,20,45),(rating_ssub$Rating+220)/440,col=colours,pch=5)
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
lines(0:45, V[,i],col = colours[cond[i]],lwd=3)
points(c(1,5,20,45),(rating_ssub$Rating+220)/440,col=colours,pch=5)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
lines(0:45, V[,i],col = colours[cond[i]],lwd=3)
points(c(1,5,20,45),(rating_ssub$Rating+220)/440,col=colours,pch=16)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
lines(0:45, V[,i],col = colours[cond[i]],lwd=3)
points(c(1,5,20,45),(rating_ssub$Rating+220)/440,col=colours[cond[i]],pch=16)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
lines(0:45, 1-V[,i],col = colours[cond[i]],lwd=3)
points(c(1,5,20,45),(rating_ssub$Rating+220)/440,col=colours[cond[i]],pch=16)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL demonstration",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
lines(0:45, 1-V[,i],col = colours[cond[i]],lwd=3)
}
for (i in 1:ncol(V)) {
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
points(c(1,5,20,45),(rating_ssub$Rating+220)/440,col=colours[cond[i]],pch=16)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
1:4/4
sum(1:4/4)
sum(1:4/10)
rating_sub = subset(ratings,ratings$ID==pat_name)
V_init = (rating_sub$Rating[rating_sub$Index==1]+220)/440 #Normalised
compute_error <- function(alpha, R, V_init, rating_ssub, decay= c(1,1,1,1)){
V = numeric(45)
V[1] = V_init
for(t in 1:45){
v = RL(v,R[t],alpha)
V[t] = v
}
#Computing the error
SE = sum(((decay*(rating_ssub$Rating+220)/440-(1-V[c(1,5,20,45)])))^2)
return(SE)
}
alphas = numeric(6)
for (i in 1:6){
#RL
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
# Optimization process
result <- optim(par = 0.2,  # alpha
fn = compute_error,
R = R,  # Additional parameters
V_init = v,
rating_ssub = rating_ssub,
decay = c(1:4/10),
method = "L-BFGS-B",
lower = 0,
upper = 1)
print(i)
print(result$par)
alphas[i] = result$par
}
V = matrix(NA,45,dim(pat)[1]/45)
conditions = matrix(NA,2,dim(pat)[1]/45)
for (i in 1:(dim(pat)[1]/45)){
v = V_init[i]
sub = pat[((i-1)*45+1):((i-1)*45+45),]
R = sub$WinLose
for(t in 1:45){
v = RL(v,R[t],alphas[i])
V[t,i] = v
}
#Here it should be only one everytime but as sanity check I'll put unique()
conditions[1,i] = unique(sub$WinProb)
conditions[2,i] = unique(sub$Condition)
}
V = rbind(V_init,V)
colours = c("#1f77b4","#ff7f0e","#2ca02c")
cond = ifelse(conditions[1,]=="low",1,ifelse(conditions[1,]=="med",2,3))
plot(numeric(0), xlim = c(0, 45), ylim = c(0, 1), main = "RL fitted block by block",ylab = "Oponent Value",xlab="Trials")
for (i in 1:ncol(V)) {
lines(0:45, 1-V[,i],col = colours[cond[i]],lwd=3)
}
for (i in 1:ncol(V)) {
#Ratings
rating_ssub = rating_sub[(4*(i-1)+1):((i)*4),]
points(c(1,5,20,45),(rating_ssub$Rating+220)/440,col=colours[cond[i]],pch=16)
}
abline(h = seq(.25,.75,.25),col = colours,lty=2)
legend("topleft",legend = c("Low","Med","High"),col = colours,lty=1,lwd=2,cex=0.8)
setwd("~/Git/SingleCell-RL")
getwd()
setwd("~/Psycopy/fMRITask1")
rm(lit=ls())
rm(list=ls())
library(reticulate)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("C:\Program Files\Inkscape\bin\python.exe", required = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("C:/Program Files/Inkscape/bin/python.exe", required = TRUE)
